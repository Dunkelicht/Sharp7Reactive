// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Sharp7.Rx.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ParsingS7VariableName")]
    public partial class ParsingS7VariableNameFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ParsingS7VariableName.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ParsingS7VariableName", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsing variable name for bool")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ParsingVariableNameForBool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parsing variable name for bool", null, new string[] {
                        "mytag"});
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
 testRunner.Given("I have an Parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "VarName"});
            table1.AddRow(new string[] {
                        "DB13.DBX3.1"});
            table1.AddRow(new string[] {
                        "Db403.X5.2"});
            table1.AddRow(new string[] {
                        "DB55DBX23.6"});
            table1.AddRow(new string[] {
                        "DB1.S255"});
            table1.AddRow(new string[] {
                        "DB1.S255.20"});
            table1.AddRow(new string[] {
                        "DB5.String887.20"});
            table1.AddRow(new string[] {
                        "DB506.B216"});
            table1.AddRow(new string[] {
                        "DB506.DBB216.5"});
            table1.AddRow(new string[] {
                        "DB506.D216"});
            table1.AddRow(new string[] {
                        "DB506.DINT216"});
            table1.AddRow(new string[] {
                        "DB506.INT216"});
            table1.AddRow(new string[] {
                        "DB506.DBW216"});
            table1.AddRow(new string[] {
                        "DB506.DUL216"});
            table1.AddRow(new string[] {
                        "DB506.DULINT216"});
            table1.AddRow(new string[] {
                        "DB506.DULONG216"});
#line 6
 testRunner.And("I have the following variables", ((string)(null)), table1, "And ");
#line 23
 testRunner.When("I parse the var name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operand",
                        "DbNr",
                        "Start",
                        "Length",
                        "Bit",
                        "Type"});
            table2.AddRow(new string[] {
                        "Db",
                        "13",
                        "3",
                        "1",
                        "1",
                        "Bit"});
            table2.AddRow(new string[] {
                        "Db",
                        "403",
                        "5",
                        "1",
                        "2",
                        "Bit"});
            table2.AddRow(new string[] {
                        "Db",
                        "55",
                        "23",
                        "1",
                        "6",
                        "Bit"});
            table2.AddRow(new string[] {
                        "Db",
                        "1",
                        "255",
                        "0",
                        "0",
                        "String"});
            table2.AddRow(new string[] {
                        "Db",
                        "1",
                        "255",
                        "20",
                        "0",
                        "String"});
            table2.AddRow(new string[] {
                        "Db",
                        "5",
                        "887",
                        "20",
                        "0",
                        "String"});
            table2.AddRow(new string[] {
                        "Db",
                        "506",
                        "216",
                        "1",
                        "0",
                        "Byte"});
            table2.AddRow(new string[] {
                        "Db",
                        "506",
                        "216",
                        "5",
                        "0",
                        "Byte"});
            table2.AddRow(new string[] {
                        "Db",
                        "506",
                        "216",
                        "0",
                        "0",
                        "Double"});
            table2.AddRow(new string[] {
                        "Db",
                        "506",
                        "216",
                        "4",
                        "0",
                        "DInteger"});
            table2.AddRow(new string[] {
                        "Db",
                        "506",
                        "216",
                        "2",
                        "0",
                        "Integer"});
            table2.AddRow(new string[] {
                        "Db",
                        "506",
                        "216",
                        "2",
                        "0",
                        "Integer"});
            table2.AddRow(new string[] {
                        "Db",
                        "506",
                        "216",
                        "8",
                        "0",
                        "ULong"});
            table2.AddRow(new string[] {
                        "Db",
                        "506",
                        "216",
                        "8",
                        "0",
                        "ULong"});
            table2.AddRow(new string[] {
                        "Db",
                        "506",
                        "216",
                        "8",
                        "0",
                        "ULong"});
#line 24
 testRunner.Then("the result should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
